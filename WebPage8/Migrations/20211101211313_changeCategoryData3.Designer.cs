// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebPage8.Data;

namespace WebPage8.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211101211313_changeCategoryData3")]
    partial class changeCategoryData3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3e4ce8e4-3ae8-11ec-8d3d-0242ac130003",
                            ConcurrencyStamp = "57edd77c-5564-407d-8ff7-e11d363a3b8e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "55635e1e-3ae8-11ec-8d3d-0242ac130003",
                            ConcurrencyStamp = "772a5a99-18cf-407c-bc2a-5fcabaf0e236",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "731d7700-3ae8-11ec-8d3d-0242ac130003",
                            ConcurrencyStamp = "5ae1ca42-bb44-455b-b510-ff0823b76b94",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebPage8.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            BrandUrl = "images/Brand/acer.jpg",
                            Description = "Acer incorporated is now one of the biggest brands in computer hardware and electronics. They're also one of the biggest laptop brands known for their cheap and affordable laptop computers.",
                            Name = "Acer"
                        },
                        new
                        {
                            CategoryId = 2,
                            BrandUrl = "images/Brand/samsung.jpg",
                            Description = "Samsung is one of the best laptop manufacturers right now, and over the last few years, it has released some of the best Windows laptops available. Featuring powerful specs, great battery life, and premium designs, Samsung devices are consistently cutting edge and high quality",
                            Name = "Samsung"
                        },
                        new
                        {
                            CategoryId = 3,
                            BrandUrl = "images/Brand/Lenovo.jfif",
                            Description = "Lenovo is truly an excellent brand to get for your laptop needs! They offer proven and tested reliability for their laptops, and also an amazing value at every price for every user.",
                            Name = "Lenovo"
                        },
                        new
                        {
                            CategoryId = 4,
                            BrandUrl = "images/Brand/Hp.png",
                            Description = "Through it all, HP has earned a reputation for reliable laptops with very competent customer service. Today, HP regularly goes head-to-head with some of the best laptop manufacturers in the world",
                            Name = "Hp"
                        },
                        new
                        {
                            CategoryId = 5,
                            BrandUrl = "images/Brand/dell.png",
                            Description = "ASUS is a good and reputable brand, the brand is well-known for its optimized performance with the lowest computer specifications. In the fiercely competitive market for computing and hand-held devices",
                            Name = "DELL"
                        },
                        new
                        {
                            CategoryId = 6,
                            BrandUrl = "images/Brand/asus.png",
                            Description = "ASUS is a good and reputable brand, the brand is well-known for its optimized performance with the lowest computer specifications. In the fiercely competitive market for computing and hand-held devices",
                            Name = "Asus"
                        });
                });

            modelBuilder.Entity("WebPage8.Models.Computer", b =>
                {
                    b.Property<int>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("HardDisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComputerId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Computers");

                    b.HasData(
                        new
                        {
                            ComputerId = 1,
                            CategoryId = 1,
                            HardDisk = "512 GB SSD",
                            ImageUrl = "../images/5.png",
                            Name = "C",
                            Price = 11990m,
                            Processor = "Intel® Core™ i5-10300H processor",
                            RAM = "16 GB",
                            ScreenSize = "120 Hz 17,3' Full HD - skärm",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 2,
                            CategoryId = 1,
                            HardDisk = "512 GB",
                            ImageUrl = "../images/6.png",
                            Name = "C",
                            Price = 9490m,
                            Processor = "Intel® Core™ i5-10300H processor",
                            RAM = "16 GB",
                            ScreenSize = "120 Hz 15,6' Full HD - skärm(IPS - panel)",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 3,
                            CategoryId = 1,
                            HardDisk = "512 GB SSD",
                            ImageUrl = "../images/2.png",
                            Name = "B",
                            Price = 5990m,
                            Processor = "Intel Pentium Silver N6000-processor",
                            RAM = "8GB",
                            ScreenSize = "No pen and touch input is available for this display",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 4,
                            CategoryId = 1,
                            HardDisk = "1000 GB SSD",
                            ImageUrl = "../images/1.png",
                            Name = "A",
                            Price = 9490m,
                            Processor = "Intel® Core™ i7-1065G7 processor",
                            RAM = "16 GB",
                            ScreenSize = "14' Full HD - skärm",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 5,
                            CategoryId = 1,
                            HardDisk = "64 GB",
                            ImageUrl = "../images/3.png",
                            Name = "C",
                            Price = 2990m,
                            Processor = "Intel® Celeron® N4020 processor",
                            RAM = "4 GB",
                            ScreenSize = "14' Full HD - skärm(1920 x 1080)",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 6,
                            CategoryId = 1,
                            HardDisk = "1TB SSD",
                            ImageUrl = "../images/4.png",
                            Name = "C",
                            Price = 29990m,
                            Processor = "Intel® Core™ i7-10875H processor",
                            RAM = "32 GB",
                            ScreenSize = "15,6' Ultra HD 4K - pekskärm(IPS - panel)",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 7,
                            CategoryId = 2,
                            HardDisk = "",
                            ImageUrl = "../images/pro2.png",
                            Name = "D",
                            Price = 2000m,
                            Processor = "Intel(R) Core(TM) i7-8700K CPU @ 3.7GHz3.70",
                            RAM = "32GB",
                            ScreenSize = "No pen and touch input is available for this display",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 8,
                            CategoryId = 3,
                            HardDisk = "",
                            ImageUrl = "../images/pro2.png",
                            Name = "E",
                            Price = 2000m,
                            Processor = "Intel(R) Core(TM) i7-8700K CPU @ 3.7GHz3.70",
                            RAM = "32GB",
                            ScreenSize = "No pen and touch input is available for this display",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 9,
                            CategoryId = 3,
                            HardDisk = "",
                            ImageUrl = "../images/pro2.png",
                            Name = "F",
                            Price = 2000m,
                            Processor = "Intel(R) Core(TM) i7-8700K CPU @ 3.7GHz3.70",
                            RAM = "32GB",
                            ScreenSize = "No pen and touch input is available for this display",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 10,
                            CategoryId = 4,
                            HardDisk = "",
                            ImageUrl = "../images/pro2.png",
                            Name = "G",
                            Price = 2000m,
                            Processor = "Intel(R) Core(TM) i7-8700K CPU @ 3.7GHz3.70",
                            RAM = "32GB",
                            ScreenSize = "No pen and touch input is available for this display",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 11,
                            CategoryId = 4,
                            HardDisk = "",
                            ImageUrl = "../images/pro2.png",
                            Name = "H",
                            Price = 2000m,
                            Processor = "Intel(R) Core(TM) i7-8700K CPU @ 3.7GHz3.70",
                            RAM = "32GB",
                            ScreenSize = "No pen and touch input is available for this display",
                            SystemType = "64-bit operating system"
                        },
                        new
                        {
                            ComputerId = 12,
                            CategoryId = 2,
                            HardDisk = "256GB",
                            ImageUrl = "../images/Brand/samsung1.jpg",
                            Name = "Galaxy Book Pro 360 ",
                            Price = 11490m,
                            Processor = "Intel® Core™ i5-1135G7 ",
                            RAM = "8GB ",
                            ScreenSize = "15.6 ",
                            SystemType = "Windows 11 Home "
                        },
                        new
                        {
                            ComputerId = 13,
                            CategoryId = 2,
                            HardDisk = "256GB",
                            ImageUrl = "../images/Brand/samsung2.jpg",
                            Name = "Samsung Galaxy Book Flex2 ",
                            Price = 8490m,
                            Processor = "Intel Core i5 ",
                            RAM = "8GB",
                            ScreenSize = "15.60 ",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 14,
                            CategoryId = 2,
                            HardDisk = "512GB",
                            ImageUrl = "../images/Brand/samsung3.jpg ",
                            Name = "Galaxy Book ION Core i7",
                            Price = 11799m,
                            Processor = "Intel Core i7",
                            RAM = "16GB ",
                            ScreenSize = "13.3",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 15,
                            CategoryId = 2,
                            HardDisk = "256GB",
                            ImageUrl = "../images/Brand/samsung4.jpg",
                            Name = "Samsung Galaxy Book Flex NP930QCG-K01DE ",
                            Price = 16729m,
                            Processor = "Intel® Core i5 ",
                            RAM = "8GB",
                            ScreenSize = "13.3 ",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 16,
                            CategoryId = 2,
                            HardDisk = "512GB",
                            ImageUrl = "../images/Brand/samsung5.jpg ",
                            Name = "Galaxy Book Pro 360 NP950QDB-KC2DE Notebook ",
                            Price = 26558m,
                            Processor = " Intel Core processor i7",
                            RAM = "16GB ",
                            ScreenSize = "15.6",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 17,
                            CategoryId = 3,
                            HardDisk = "512GB",
                            ImageUrl = "../images/Brand/Lenovo3.jpg ",
                            Name = "Lenovo NOTEBOOK IP 3 17ALC6 ",
                            Price = 7638m,
                            Processor = "Intel Core processor i7",
                            RAM = "‎8 GB ",
                            ScreenSize = "‎17.3 ",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 18,
                            CategoryId = 3,
                            HardDisk = " 1000GB",
                            ImageUrl = "../images/Brand/Lenovo4.jpg ",
                            Name = "Lenovo Legion 5",
                            Price = 12990m,
                            Processor = "AMD Ryzen 7 ",
                            RAM = " 16GB ",
                            ScreenSize = "15.6 ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 19,
                            CategoryId = 3,
                            HardDisk = " 512 GB SSD-lagring",
                            ImageUrl = "../images/Brand/Lenovo5.jpg",
                            Name = "Lenovo IdeaPad Gaming 3  ",
                            Price = 9490m,
                            Processor = "AMD Ryzen™ 5 4600H-processor ",
                            RAM = "8 GB DDR4 RAM ",
                            ScreenSize = " 15.6",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 20,
                            CategoryId = 3,
                            HardDisk = "512 GB",
                            ImageUrl = "../images/Brand/Lenovo6.jpg",
                            Name = "Lenovo IdeaPad 3 14ITL6 ",
                            Price = 7990m,
                            Processor = "Intel Core i5 ",
                            RAM = "8 GB",
                            ScreenSize = "14, ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 21,
                            CategoryId = 4,
                            HardDisk = "512 GB SSD",
                            ImageUrl = "../images/Brand/HP3.jpg",
                            Name = "HP Pavilion Gaming 15-ec2823no",
                            Price = 11490m,
                            Processor = "AMD Ryzen™ 5600H-mobilprocessor ",
                            RAM = "16 GB DDR4 RAM ",
                            ScreenSize = "15.6 ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 22,
                            CategoryId = 4,
                            HardDisk = " 512 GB SSD",
                            ImageUrl = "../images/Brand/HP4.jpg",
                            Name = "HP Laptop 17-cn0815no ",
                            Price = 8490m,
                            Processor = "Intel® Core™ i5-1135G7 processor ",
                            RAM = "8 GB DDR4 RAM ",
                            ScreenSize = "17.3 ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 23,
                            CategoryId = 4,
                            HardDisk = "256 GB SSD",
                            ImageUrl = "../images/Brand/HP5.jpg",
                            Name = "HP ENVY x360 13-ay1335no ",
                            Price = 9990m,
                            Processor = "AMD Ryzen™ 5 5600U processor ",
                            RAM = "8 GB DDR4 RAM ",
                            ScreenSize = "13 ",
                            SystemType = "Windows 11 Home  "
                        },
                        new
                        {
                            ComputerId = 24,
                            CategoryId = 4,
                            HardDisk = "1TB SSD",
                            ImageUrl = "../images/Brand/HP6jpg",
                            Name = " HP OMEN 16c0800no ",
                            Price = 21990m,
                            Processor = "AMD Ryzen 9 5900H-processor ",
                            RAM = "16 GB DDR4 ",
                            ScreenSize = "16.1 ",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 25,
                            CategoryId = 5,
                            HardDisk = "1TB NVMe-lagring",
                            ImageUrl = "../images/Brand/Asus1.jpg",
                            Name = "Asus ProArt StudioBook Pro X  ",
                            Price = 61551m,
                            Processor = "Intel® Xeon® E-2276M processor ",
                            RAM = "64GB DDR4 RAM ",
                            ScreenSize = "17 ",
                            SystemType = "Windows 10 Home "
                        },
                        new
                        {
                            ComputerId = 26,
                            CategoryId = 5,
                            HardDisk = "1024 GB SSD",
                            ImageUrl = "../images/Brand/Asus2.jpg",
                            Name = "ASUS ROG Flow X13 GV301 ",
                            Price = 37990m,
                            Processor = "AMD Ryzen™ 9 5980HS-processor ",
                            RAM = "32 GB LPDDR4X RAM ",
                            ScreenSize = "13 ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 27,
                            CategoryId = 5,
                            HardDisk = "1 TB SSD",
                            ImageUrl = "../images/Brand/Asus3.jpg",
                            Name = "Asus ZenBook Pro Duo 15 OLED UX582 ",
                            Price = 33990m,
                            Processor = "Intel® Core™ i7-10870H-processor ",
                            RAM = "32 GB DDR4 RAM ",
                            ScreenSize = "15,6",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 28,
                            CategoryId = 5,
                            HardDisk = "1 TB SSD",
                            ImageUrl = "../images/Brand/Asus4.jpg",
                            Name = "Asus ZenBook Pro 15 OLED UX535 ",
                            Price = 23990m,
                            Processor = "Intel® Core™ i7-10870H processor ",
                            RAM = "16 GB DDR4 RAM ",
                            ScreenSize = "15.6 ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 29,
                            CategoryId = 5,
                            HardDisk = "512 GB NVMe-lagring",
                            ImageUrl = "../images/Brand/Asus5.jpg",
                            Name = "Asus ExpertBook B9 ",
                            Price = 19299m,
                            Processor = "Intel® Core™ i7-1165G7 processor ",
                            RAM = "16 GB DDR4 RAM ",
                            ScreenSize = "14 ",
                            SystemType = "Windows 10 Home"
                        },
                        new
                        {
                            ComputerId = 30,
                            CategoryId = 5,
                            HardDisk = "1 TB SSD",
                            ImageUrl = "../images/Brand/Asus6.jpg",
                            Name = "Asus TUF Gaming A17 FA706QM",
                            Price = 16396m,
                            Processor = "AMD Ryzen™ 7 5800H processor ",
                            RAM = "16 GB RAM ",
                            ScreenSize = "17.3 ",
                            SystemType = "Windows 10 Home"
                        });
                });

            modelBuilder.Entity("WebPage8.Models.ComputerOrder", b =>
                {
                    b.Property<int>("ComputerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComputerOrderId");

                    b.HasIndex("ComputerId");

                    b.ToTable("ComputerOrders");
                });

            modelBuilder.Entity("WebPage8.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            City = "Goteborg",
                            Country = "Sweden",
                            Email = "za@a.gmail.com",
                            FirstName = "Wei",
                            LastName = "C",
                            PhoneNumber = "+12345678919",
                            PostalCode = "888",
                            Street = "Möland"
                        },
                        new
                        {
                            CustomerId = 2,
                            City = "Skåne",
                            Country = "Sweden",
                            Email = "ya@a.gmail.com",
                            FirstName = "Magnus",
                            LastName = "I",
                            PhoneNumber = "+12345678919",
                            PostalCode = "",
                            Street = "aaa"
                        },
                        new
                        {
                            CustomerId = 3,
                            City = "Skövde",
                            Country = "Sweden",
                            Email = "xa@a.gmail.com",
                            FirstName = "Muzdalifa",
                            LastName = "I",
                            PhoneNumber = "+99345678919",
                            PostalCode = "123",
                            Street = "Frostaliden"
                        },
                        new
                        {
                            CustomerId = 4,
                            City = "Uppsala",
                            Country = "Sweden",
                            Email = "aa@a.gmail.com",
                            FirstName = "Seong",
                            LastName = "Gi-hun",
                            PhoneNumber = "+33345678919",
                            PostalCode = "123",
                            Street = "bbb"
                        },
                        new
                        {
                            CustomerId = 5,
                            City = "Skövde",
                            Country = "Sweden",
                            Email = "ba@a.gmail.com",
                            FirstName = "Kang ",
                            LastName = "Sae-Byeok",
                            PhoneNumber = "+12345678919",
                            PostalCode = "345",
                            Street = "Hjo"
                        });
                });

            modelBuilder.Entity("WebPage8.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderFullfilled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebPage8.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ComputerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            ComputerId = 1,
                            CustomerId = 1,
                            Rating = 5,
                            Text = "Very happy with this system in good condition and working fine will buy from again and will tell friends and family"
                        },
                        new
                        {
                            ReviewId = 2,
                            ComputerId = 2,
                            CustomerId = 2,
                            Rating = 3,
                            Text = "I was reallly pleased with the quality and it was not damaged when received. It was delivered on time although when set up the keyboard was quite sticky while typing. I had to press really hard on the keys for my work. Apart from that, everything was perfect. I was really impressed. Thank you."
                        },
                        new
                        {
                            ReviewId = 3,
                            ComputerId = 3,
                            CustomerId = 3,
                            Rating = 5,
                            Text = "I have bought this PC for my office since 2020. There was no big issues so far and the computer worked fairly well. However, there was a small issues on the back of screen monitor which connect to unit and the wire did not connect well and not tight enough, so I have used adhesive tapes to control it to avoid pull it apart. Overall happy with their services. Keep up with your good work."
                        },
                        new
                        {
                            ReviewId = 4,
                            ComputerId = 4,
                            CustomerId = 4,
                            Rating = 3,
                            Text = "I was pleasantly surprised by the quality of the product. It arrived well packaged and undamaged and was soon up and running. I had one small enquiry re WiFi connectivity and this was answered by a helpful and courteous call handler - impressed!"
                        },
                        new
                        {
                            ReviewId = 5,
                            ComputerId = 1,
                            CustomerId = 1,
                            Rating = 1,
                            Text = "I am very pleased with my purchase, I have not set it up fully yet as I need some help but it all seems to be working lovely"
                        },
                        new
                        {
                            ReviewId = 6,
                            ComputerId = 2,
                            CustomerId = 2,
                            Rating = 1,
                            Text = "I love this computer. It is perfect for me to advance my I.T. knowledge and skills. I am totally satisfied and very Happy. Thank you. C. Taylor."
                        },
                        new
                        {
                            ReviewId = 7,
                            ComputerId = 3,
                            CustomerId = 3,
                            Rating = 4,
                            Text = "2nd computer from you well packed and delivered on time very pleased with the computer works like new thankyou."
                        },
                        new
                        {
                            ReviewId = 8,
                            ComputerId = 4,
                            CustomerId = 4,
                            Rating = 2,
                            Text = "Excellent service quick to get my order to me, Excellent affordable solutions for everyone."
                        });
                });

            modelBuilder.Entity("WebPage8.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "05bff8a9-6631-47f9-b943-365dc71ea489",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "263ce618-5843-47e9-9d6d-92492ce067d3",
                            Email = "Super@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "Abc123+",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9178eb6e-bc68-46c1-9ee1-6560183fbafa",
                            TwoFactorEnabled = false,
                            FirstName = "Jonan",
                            LastName = "Eriksson"
                        },
                        new
                        {
                            Id = "118ac7d8-c872-48ef-8729-d70ca7b9ae66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ec1538d-6b9b-4d7b-acda-1978caf09261",
                            Email = "Admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "Abc123+",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7bc66a1-4396-47da-ae57-fe45f34f1063",
                            TwoFactorEnabled = false,
                            FirstName = "Admin1",
                            LastName = "Adminsson"
                        },
                        new
                        {
                            Id = "de6b3424-fe25-49a9-b9d2-7b66ef2d74ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f592a85a-a3af-41d4-82ac-a0f9c135711a",
                            Email = "Admin2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "Abc123+",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "425952cb-edd7-4684-bf12-c560f2aa087e",
                            TwoFactorEnabled = false,
                            FirstName = "Admin2",
                            LastName = "Adminsson"
                        },
                        new
                        {
                            Id = "a79321df-cdae-40b9-bece-d2286b5f6381",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f749c816-b66c-4406-9c7b-9affca68c9ad",
                            Email = "SuperAdmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "Abc123+",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "127f4b43-9f9e-4cf4-85cb-6a85c4aa7585",
                            TwoFactorEnabled = false,
                            FirstName = "SuperAdmin",
                            LastName = "Adminsson"
                        },
                        new
                        {
                            Id = "b6c6c801-2576-4d85-9fea-3028c55b1f01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "190cd746-0c1b-4876-8b27-cac1774c1e2d",
                            Email = "User@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "Abc123+",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d6cc6db-f11a-4f44-86c0-1d7a8591b7b3",
                            TwoFactorEnabled = false,
                            FirstName = "User",
                            LastName = "Userson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebPage8.Models.Computer", b =>
                {
                    b.HasOne("WebPage8.Models.Category", "Category")
                        .WithMany("Computers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebPage8.Models.ComputerOrder", b =>
                {
                    b.HasOne("WebPage8.Models.Computer", "Computer")
                        .WithMany("ComputerOrders")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebPage8.Models.Order", b =>
                {
                    b.HasOne("WebPage8.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebPage8.Models.Review", b =>
                {
                    b.HasOne("WebPage8.Models.Computer", "Computer")
                        .WithMany("Reviews")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPage8.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
